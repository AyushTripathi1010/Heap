//  Leetcode Link: https://leetcode.com/problems/total-cost-to-hire-k-workers/
class Solution {
public:
    //  Note: It is a very simple to understand and direct question
    //  just to not miss any edge case just dry run for the following testCase
    // Then you will automatically understand.

    // costs = [17,12,10,2,7,2,11,20,8], k = 3, candidates = 4
    //  where k is number of candidates to be hired.
    long long totalCost(vector<int>& costs, int k, int candidates) {
           
           priority_queue<int, vector<int>, greater<int>> pq1, pq2;
           
           int n = costs.size();
           int hired = 0;
           int i = 0  ,j = n-1;
             long long ans =0;
           while(hired < k)
           {
               
               while(pq1.size() < candidates && i<=j)
               {
                   pq1.push(costs[i++]);
               }

               while(pq2.size() < candidates && j>=i)
               {
                   pq2.push(costs[j--]);
               }
              
                int min_pq1 = !pq1.empty() ? pq1.top() :INT_MAX; 
                int min_pq2 = !pq2.empty() ? pq2.top() : INT_MAX;
                
                if(min_pq1 <= min_pq2)
                {
                    pq1.pop();
                    ans+= min_pq1;
                }   
                else
                {
                    pq2.pop();
                    ans+=min_pq2;
                }             
         
               
                    hired++;
           }

           return ans;



    }
};